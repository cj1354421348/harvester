name: Docker Image CI

on:
  push:
    branches: [ "main" ] # 当推送到 main 分支时触发
    tags: [ 'v*.*.*' ]     # 当打上 vX.Y.Z 格式的标签时触发
  pull_request:
    branches: [ "main" ] # 在拉取请求时也进行构建（不推送）

env:
  REGISTRY: ghcr.io # GitHub Container Registry 的地址
  IMAGE_NAME: ${{ github.repository }} # 镜像名称，通常是 GitHub 仓库名 (例如 wzdnzd/harvester)

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read # 允许读取仓库内容
      packages: write # 允许写入 GitHub Packages (GHCR)
      # id-token: write # 如果你需要使用 OIDC Token 获取 credentials, 但对于 GHCR push 不是必需的

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # GitHub Actions 提供当前触发工作流的用户/机器人名称
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub Actions 提供的自动生成令牌，有 push 到 GHCR 的权限

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}} # 例如 "v1.0.0" -> "1.0.0"
            type=semver,pattern={{major}}.{{minor}} # 例如 "v1.0.0" -> "1.0"
            type=sha,format=long # 包含完整的 commit SHA
            type=sha,format=short # 包含短 commit SHA
            type=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || github.ref == 'refs/heads/main' }} # main 分支打 latest 标签

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 的上下文路径
          file: ./Dockerfile # 指定 Dockerfile 路径
          platforms: linux/amd64 # 可以添加 linux/arm64 等多平台
          push: ${{ github.event_name != 'pull_request' }} # 只有在非 PR 触发时才推送
          tags: ${{ steps.meta.outputs.tags }} # 使用 metadata action 生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用 metadata action 生成的 label
          build-args: |
            PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple # 传递 build-arg
