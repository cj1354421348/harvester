name: Docker Image CI for Harvester # 工作流的名称，会在 GitHub Actions 页面显示

on:
  push:
    branches:
      - "main"   # ⚠️ 修改1: 您的主分支名称，如果不是 'main' 而是 'master' 或其他，请更改
      - "master" # ⚠️ 修改1: 同上，可以添加多个分支
    tags:
      - 'v*.*.*' # ⚠️ 修改2: 当您打例如 'v1.0.0' 这样的标签时，会触发构建并给镜像打上对应的版本标签。如果不需要，可以删除此行。

  # 可选：也可以设置手动触发，方便调试或特殊场景
  workflow_dispatch:

permissions:
  contents: read   # 允许 Actions 读取仓库内容
  packages: write  # 允许 Actions 写入 GitHub Packages (GHCR 属于 Packages)

env:
  # GHCR 注册表地址
  REGISTRY: ghcr.io
  # 镜像名称，这里会自动使用您的 GitHub 仓库名称，例如 'your-user/your-repo'
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_and_push_image:
    runs-on: ubuntu-latest # 在 Ubuntu 最新版本虚拟机上运行此工作流

    steps:
      - name: Checkout repository # 步骤1: 检出您的代码
        uses: actions/checkout@v4

      - name: Log in to the Container registry # 步骤2: 登录到 GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}         # 使用 GitHub Actions 默认的用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Actions 默认提供的令牌进行认证

      - name: Extract metadata (tags, labels) for Docker # 步骤3: 从 Git 信息中提取 Docker 镜像的标签和元数据
        id: meta # 给这个步骤一个ID，以便后续步骤引用其输出
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} # 设置镜像名称，如 ghcr.io/your-user/your-repo
          
          # ⚠️ 关键点：'tags:' 后必须跟一个管道符 '|'，表示这是一个多行字符串。
          #    并且下面的每一行 'type=' 都必须比 'tags:' 这一行有更深的缩进！（通常是2个空格）
          tags: |
            type=schedule                    # 启用时间表触发的构建标签
            type=ref,event=branch            # 推送到分支时，基于分支名生成标签 (如 main -> main)
            type=ref,event=pr                # 从 PR 构建时，基于PR号生成标签
            type=semver,pattern={{version}}  # 当 Git Tag 为 v1.0.0 时，生成 1.0.0 标签
            type=semver,pattern={{major}}.{{minor}} # 当 Git Tag 为 v1.0.0 时，生成 1.0 标签
            type=sha,format=long             # 生成完整的 Git Commit SHA 作为标签
            type=sha,format=short            # 生成短格式的 Git Commit SHA 作为标签
            # 只有当推送到仓库的默认分支 (例如 'main' 或 'master') 时才打 'latest' 标签
            type=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || github.ref == 'refs/heads/main' }}
          
          labels: ${{ steps.meta.outputs.labels }} # 从 metadata action 中获取并设置 Docker 标签（如 org.opencontainers.image.source 等）

      - name: Set up Docker Buildx # 步骤4: 设置 Docker Buildx，用于多平台构建 (如 AMD64, ARM64)
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image # 步骤5: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .                     # Dockerfile 的构建上下文，'.' 表示仓库根目录
          file: ./Dockerfile             # ⚠️ 修改3: 您的 Dockerfile 路径，如果不在根目录，请修改
          platforms: linux/amd64         # ⚠️ 修改4: 定义构建的平台。如果需要支持 ARM64 (M1/M2 Mac, ARM服务器)，可以添加 'linux/amd64,linux/arm64/v8'
          push: true                     # 意味着构建完成后同时推送镜像到注册表
          tags: ${{ steps.meta.outputs.tags }} # 使用上一步 metadata action 生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用上一步 metadata action 生成的 labels
          
          # ⚠️ 修改5: 如果您的 Dockerfile 中有使用 ARG 来定义构建参数，请在此处添加。
          # 例如，如果您的 Dockerfile 有 ARG PIP_INDEX_URL，可以这样传递：
          build-args: |
            PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple # ⚠️ 确认这个URL是否是您希望使用的

